generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  roleId          Int
  fullName        String   @db.VarChar(255)
  userName        String   @unique @db.VarChar(128)
  hasProfileImage Boolean  @default(false)
  Logs            Logs[]
  Notes           Notes[]
  Task            Task[]
  role            Role     @relation(fields: [roleId], references: [id])

  @@index([roleId], map: "users_roleId_fkey")
  @@map("users")
}

model Role {
  role      String    @unique
  id        Int       @id @default(autoincrement())
  master    Boolean   @default(false)
  createdAt DateTime? @default(now())
  User      User[]

  @@map("roles")
}

model Notes {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "notes_authorId_fkey")
  @@map("notes")
}

model Logs {
  id        Int      @id @default(autoincrement())
  message   String
  createdOn DateTime @default(now()) @db.Date()
  createdAt DateTime @default(now())
  userId    String
  type      LogType
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "logs_userId_fkey")
  @@map("logs")
}

model TaskStatus {
  id    String @id
  name  String @unique
  order Int
  Task  Task[]

  @@map("task status")
}

model Task {
  id           Int          @id @default(autoincrement())
  title        String
  priority     TaskPriority
  type         TaskType
  assignedToId String?
  status       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
  assignedTo   User?        @relation(fields: [assignedToId], references: [id])
  taskStatus   TaskStatus   @relation(fields: [status], references: [id])

  @@index([status], map: "tasks_status_fkey")
  @@map("tasks")
}

enum LogType {
  notes
  roles
  auth
  tasks
}

enum TaskPriority {
  trivial
  low
  lowest
  medium
  high
  highest
  critical
  blocker
}

enum TaskType {
  bugfix
  feature
  refactor
  other
}
